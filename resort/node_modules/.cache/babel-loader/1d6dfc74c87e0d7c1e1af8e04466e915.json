{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bayaz\\\\Desktop\\\\Beach Resort\\\\resort\\\\src\\\\Context.js\";\nimport React, { Component } from 'react';\nimport items from './data';\nconst RoomContext = React.createContext(); //<RoomContext.Provider value={'Hello'}\n\nexport default class RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = event.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      let {\n        rooms,\n        type,\n        capacity,\n        price,\n        minSize,\n        maxSize,\n        breakfast,\n        pets\n      } = this.state; // all the rooms\n\n      let tempRooms = [...rooms]; // transform values\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); // filter by type\n\n      if (type !== 'all') {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } //filter by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } // filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price);\n      tempRooms; // change state\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  //GetData\n  componentDidMount() {\n    //this.getData\n    let rooms = this.formatData(items);\n    let featuredRooms = rooms.filter(room => room.featured === true);\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let room = { ...item.fields,\n        images,\n        id\n      };\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(RoomContext.Provider, {\n      value: { ...this.state,\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, this.props.children);\n  }\n\n}\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(RoomConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 12\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 22\n      }\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["C:/Users/bayaz/Desktop/Beach Resort/resort/src/Context.js"],"names":["React","Component","items","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getRoom","slug","tempRooms","room","find","handleChange","event","target","value","checked","name","setState","filterRooms","parseInt","filter","componentDidMount","formatData","featured","Math","max","map","item","size","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport items from './data'\r\nconst RoomContext = React.createContext();\r\n//<RoomContext.Provider value={'Hello'}\r\nexport default class RoomProvider extends Component {\r\n    state={\r\n        rooms: [],\r\n        sortedRooms: [],\r\n        featuredRooms: [],\r\n        loading: true,\r\n        type: 'all',\r\n        capacity:1,\r\n        price:0,\r\n        minPrice:0,\r\n        maxPrice:0,\r\n        minSize:0,\r\n        maxSize:0,\r\n        breakfast: false,\r\n        pets: false\r\n    }\r\n    //GetData\r\n\r\n    componentDidMount(){\r\n        //this.getData\r\n        let rooms = this.formatData(items)\r\n        let featuredRooms = rooms.filter(room=> room.featured === true);\r\n        let maxPrice = Math.max(...rooms.map(item=> item.price));\r\n        let maxSize = Math.max(...rooms.map(item=> item.size))\r\n        this.setState({\r\n            rooms,\r\n            featuredRooms,\r\n            sortedRooms: rooms,\r\n            loading: false,\r\n            price: maxPrice,\r\n            maxPrice,\r\n            maxSize,\r\n        })\r\n    }\r\n\r\n    formatData(items){\r\n        let tempItems = items.map(item=>{\r\n            let id = item.sys.id\r\n            let images = item.fields.images.map(image =>image.fields.file.url)\r\n            let room = {...item.fields,images,id}\r\n            return room\r\n        })\r\n        return tempItems\r\n    }\r\n\r\n    getRoom=(slug) =>{\r\n        let tempRooms= [...this.state.rooms]\r\n        const room = tempRooms.find(room => room.slug===slug)\r\n        return room\r\n    }\r\n\r\n    handleChange = event =>{\r\n        const target = event.target\r\n        const value = event.type=== 'checkbox' ? target.checked:target.value\r\n        const name = event.target.name\r\n        this.setState({\r\n            [name]:value\r\n        },this.filterRooms)\r\n    }\r\n\r\n    filterRooms=()=>{\r\n        let {\r\n            rooms,\r\n            type,\r\n            capacity,\r\n            price,\r\n            minSize,\r\n            maxSize,\r\n            breakfast,\r\n            pets\r\n        } = this.state\r\n        // all the rooms\r\n        let tempRooms = [...rooms]\r\n        // transform values\r\n        capacity=parseInt(capacity)\r\n        price=parseInt(price)\r\n\r\n        // filter by type\r\n        if(type!=='all'){\r\n            tempRooms = tempRooms.filter(room=>room.type === type)\r\n        }\r\n\r\n        //filter by capacity\r\n        if(capacity !==1){\r\n            tempRooms = tempRooms.filter(room =>room.capacity >= capacity)\r\n        }\r\n        // filter by price\r\n        tempRooms = tempRooms.filter(room => room.price <= price)\r\n\r\n        tempRooms\r\n        // change state\r\n        this.setState({\r\n            sortedRooms:tempRooms\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <RoomContext.Provider value ={{...this.state, getRoom: this.getRoom,handleChange:this.handleChange }}>\r\n                {this.props.children}\r\n            </RoomContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nconst RoomConsumer = RoomContext.Consumer;\r\n\r\nexport function withRoomConsumer(Component){\r\n    return function ConsumerWrapper(props){\r\n    return <RoomConsumer>\r\n        {\r\n            value => <Component {...props} context={value}/>\r\n        }\r\n    </RoomConsumer>\r\n    }\r\n}\r\n\r\nexport{RoomProvider,RoomConsumer,RoomContext}\r\n"]},"metadata":{},"sourceType":"module"}